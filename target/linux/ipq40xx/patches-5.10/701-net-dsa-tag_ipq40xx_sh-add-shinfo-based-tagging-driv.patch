From 5aef882e0e349cd8dc414c13cb8a565dc06821c1 Mon Sep 17 00:00:00 2001
From: Gabor Juhos <j4g8y7@gmail.com>
Date: Mon, 11 Jan 2021 17:51:40 +0100
Subject: [PATCH] net: dsa: tag_ipq40xx_sh: add shinfo based tagging driver for
 IPQ40xx

This change adds a tagging protocol driver for the built-in
ethernet switch of the Qualcomm Atheros IPQ40xx SoCs.

In comparison to the existing tagging protocols this hardware
requires a slightly different approach because the switch does
not use in-band tags.

On the receive path, the source port information is embedded
into the RX descriptors of the ethernet MAC hardware. Similarly,
the destination port mask must be sent via the TX descriptors
of the ethernet MAC when a packet is sent towards the switch.

In order to support this special requirements, this patch
adds a new tagging protocol driver.

The driver extracts the source port information directly
from the 'receive return descriptor' of the ethernet MAC.
It is possible because that descriptor is part of the skb
received from the ethernet driver.

Unfortunatley, it is not possible to put the destination
port information directly to the TX descriptors, because
those are handled internally by the driver of the ethernet
hardware.

To overcome this limitation, this tagging driver uses the
DSA specific fields in skb->shinfo to send the destination
port information to the ethernet driver.

A similar tagging driver is exist but that uses skb
extensions which causes unnecessary overhead.

Signed-off-by: Gabor Juhos <j4g8y7@gmail.com>
---
 include/net/dsa.h        |  2 ++
 net/dsa/Kconfig          |  6 ++++
 net/dsa/Makefile         |  1 +
 net/dsa/tag_ipq40xx_sh.c | 64 ++++++++++++++++++++++++++++++++++++++++
 4 files changed, 73 insertions(+)
 create mode 100644 net/dsa/tag_ipq40xx_sh.c

--- a/include/net/dsa.h
+++ b/include/net/dsa.h
@@ -46,6 +46,7 @@ struct phylink_link_state;
 #define DSA_TAG_PROTO_AR9331_VALUE		16
 #define DSA_TAG_PROTO_RTL4_A_VALUE		17
 #define DSA_TAG_PROTO_BRCM_LEGACY_VALUE		22
+#define DSA_TAG_PROTO_IPQ40XX_SH_VALUE		23
 
 enum dsa_tag_protocol {
 	DSA_TAG_PROTO_NONE		= DSA_TAG_PROTO_NONE_VALUE,
@@ -67,6 +68,7 @@ enum dsa_tag_protocol {
 	DSA_TAG_PROTO_OCELOT		= DSA_TAG_PROTO_OCELOT_VALUE,
 	DSA_TAG_PROTO_AR9331		= DSA_TAG_PROTO_AR9331_VALUE,
 	DSA_TAG_PROTO_RTL4_A		= DSA_TAG_PROTO_RTL4_A_VALUE,
+	DSA_TAG_PROTO_IPQ40XX_SH	= DSA_TAG_PROTO_IPQ40XX_SH_VALUE,
 };
 
 struct packet_type;
--- a/net/dsa/Kconfig
+++ b/net/dsa/Kconfig
@@ -63,6 +63,12 @@ config NET_DSA_TAG_BRCM_PREPEND
 	  Broadcom switches which places the tag before the Ethernet header
 	  (prepended).
 
+config NET_DSA_TAG_IPQ40XX_SH
+	tristate "Tag driver for Qualcomm IPQ40xx SoCs' built-in switch (shinfo)"
+	help
+	  Say Y or M if you want to enable support for tagging frames for
+	  the built-in switch of the Qualcomm Atheros IPQ40xx SoCs.
+
 config NET_DSA_TAG_GSWIP
 	tristate "Tag driver for Lantiq / Intel GSWIP switches"
 	help
--- a/net/dsa/Makefile
+++ b/net/dsa/Makefile
@@ -10,6 +10,7 @@ obj-$(CONFIG_NET_DSA_TAG_BRCM_COMMON) +=
 obj-$(CONFIG_NET_DSA_TAG_DSA) += tag_dsa.o
 obj-$(CONFIG_NET_DSA_TAG_EDSA) += tag_edsa.o
 obj-$(CONFIG_NET_DSA_TAG_GSWIP) += tag_gswip.o
+obj-$(CONFIG_NET_DSA_TAG_IPQ40XX_SH) += tag_ipq40xx_sh.o
 obj-$(CONFIG_NET_DSA_TAG_KSZ) += tag_ksz.o
 obj-$(CONFIG_NET_DSA_TAG_RTL4_A) += tag_rtl4_a.o
 obj-$(CONFIG_NET_DSA_TAG_LAN9303) += tag_lan9303.o
--- /dev/null
+++ b/net/dsa/tag_ipq40xx_sh.c
@@ -0,0 +1,64 @@
+// SPDX-License-Identifier: GPL-2.0-only
+
+/* Copyright (c) 2021, Gabor Juhos <j4g8y7@gmail.com> */
+
+#include <linux/bitfield.h>
+#include <linux/dsa/ipq40xx.h>
+#include <linux/soc/qcom/ipq40xx-edma.h>
+
+#include "dsa_priv.h"
+
+static struct sk_buff *ipq40xx_sh_tag_xmit(struct sk_buff *skb,
+					   struct net_device *dev)
+{
+	struct dsa_port *dp = dsa_slave_to_port(dev);
+	struct ipq40xx_dsa_tag_data *tag_data;
+
+	BUILD_BUG_ON(sizeof_field(struct skb_shared_info, dsa_tag_data) <
+		     sizeof(struct ipq40xx_dsa_tag_data));
+
+	skb_shinfo(skb)->dsa_tag_proto = DSA_TAG_PROTO_IPQ40XX_SH;
+	tag_data = (struct ipq40xx_dsa_tag_data *)skb_shinfo(skb)->dsa_tag_data;
+
+	tag_data->from_cpu = 1;
+	/* set the destination port information */
+	tag_data->dp = BIT(dp->index);
+
+	return skb;
+}
+
+static struct sk_buff *ipq40xx_sh_tag_rcv(struct sk_buff *skb,
+					  struct net_device *dev,
+					  struct packet_type *pt)
+{
+	struct edma_rrd *rrd;
+	int offset;
+	int port;
+
+	offset = EDMA_RRD_SIZE + ETH_HLEN;
+	if (unlikely(skb_headroom(skb) < offset))
+		return NULL;
+
+	rrd = (struct edma_rrd *)(skb->data - offset);
+	port = FIELD_GET(EDMA_RRD1_PORT_ID_MASK, rrd->rrd1);
+
+	skb->dev = dsa_master_find_slave(dev, 0, port);
+	if (!skb->dev)
+		return NULL;
+
+	return skb;
+}
+
+const struct dsa_device_ops ipq40xx_sh_tag_dsa_ops = {
+	.name	= "ipq40xx-sh",
+	.proto	= DSA_TAG_PROTO_IPQ40XX_SH,
+	.xmit	= ipq40xx_sh_tag_xmit,
+	.rcv	= ipq40xx_sh_tag_rcv,
+};
+
+MODULE_LICENSE("GPL v2");
+MODULE_DESCRIPTION("DSA tag driver for the IPQ40xx SoCs' built-in ethernet switch");
+MODULE_AUTHOR("Gabor Juhos <j4g8y7@gmail.com>");
+MODULE_ALIAS_DSA_TAG_DRIVER(DSA_TAG_PROTO_IPQ40XX_SH);
+
+module_dsa_tag_driver(ipq40xx_sh_tag_dsa_ops);
